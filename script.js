// Author Sam Conneely
// Declaring the variables to be used within the program
let generate_random_array_button = document.getElementById(
  "generate_random_array"
);
let sort_button = document.getElementById("sort_array");
let selectAlgo = document.getElementById("algorithm");

let timer;
// const selectElement = document.querySelector(".algorithm");

let swtichInputVariable = "";

selectAlgo.addEventListener("change", function () {
  swtichInputVariable = selectAlgo.value;
});

// selectElement.addEventListener("change", (event) => {
//   const result = document.querySelector(".result");
//   result.textContent = `Currently Selected: ${event.target.value}`;
// });

// Setting the min and max size of the data to be stored
// in the array before the random array is generated
let minArraySize = 1;
let maxArraySize = 30;

// This will be the total number of elements in the array
let numberOfChunks = 30;
let unsorted_array = new Array(numberOfChunks);

// The lower the sortingSpeed the faster the array will be sorted.
// sortingSpeed is the wait time between async method iteration.
let sortingSpeed = 50;

// Functions Are Declared Below

// Creates a random number to be added into the unsorted array
function generateRandomNumber(minimumValue, maximumValue) {
  return (
    Math.floor(Math.random() * (maximumValue - minimumValue + 1)) + minimumValue
  );
}

// Generates an array of x elements using random numbers generated by the generateRandomNumber() function
function generateRandomArray() {
  for (let element = 0; element < numberOfChunks; element++) {
    unsorted_array[element] = generateRandomNumber(minArraySize, maxArraySize);
  }
}

function animateArray(array) {
  for (let element = 0; element < array.length; element++) {
    let chunk = document.createElement("div");
    chunk.classList.add("chunk");
    chunk.style.height = array[element] * 10 + "px";
    array_chunks.appendChild(chunk);
  }
}

// Bubble Sort Algorithm Code Below

async function bubbleSortTest(array) {
  let chunks = document.getElementsByClassName("chunk");
  let testTimingStart = performance.now();
  let testTimingEnd;

  for (let element = 0; element < array.length; element++) {
    for (
      let elementTwo = 0;
      elementTwo < array.length - element - 1;
      elementTwo++
    ) {
      if (array[elementTwo] > array[elementTwo + 1]) {
        for (
          let elementThree = 0;
          elementThree < chunks.length;
          elementThree++
        ) {
          if (elementThree !== elementTwo && elementThree !== elementTwo + 1) {
            chunks[elementThree].style.backgroundColor = "coral";
          }
        }
        let temporary = array[elementTwo];
        array[elementTwo] = array[elementTwo + 1];
        array[elementTwo + 1] = temporary;
        chunks[elementTwo].style.height = array[elementTwo] * 10 + "px";
        chunks[elementTwo].style.backgroundColor = "white";
        chunks[elementTwo + 1].style.height = array[elementTwo + 1] * 10 + "px";
        chunks[elementTwo + 1].style.backgroundColor = "white";
        await timeBetweenCalls(sortingSpeed);
      }
    }
    await timeBetweenCalls(sortingSpeed);

    testTimingEnd = performance.now();
    let totalSortTimeSeconds = testTimingEnd - testTimingStart;
    totalSortTimeSeconds = totalSortTimeSeconds / 1000;

    // Storing Timings Locally to Compare to Previous Sorts
    localStorage.setItem("sortTimeBubble", totalSortTimeSeconds.toFixed(2));
  }
  document.getElementById(
    "timer"
  ).innerHTML = `Previous Sort Time: ${localStorage.sortTimeBubble} Seconds`;
  console.log(`Sort Time: ${localStorage.getItem("sortTimeBubble")} Seconds`);
  return array;
}

// Insertion Sort Algorithm Code Below

async function insertionSortAlgorithm(array) {
  let chunks = document.getElementsByClassName("chunk");
  let testTimingStart = performance.now();
  let testTimingEnd;

  for (let i = 1; i < array.length; i++) {
    let key = array[i];
    let j = i - 1;
    while (j >= 0 && array[j] > key) {
      array[j + 1] = array[j];
      chunks[j + 1].style.height = array[j + 1] * 10 + "px";
      chunks[j + 1].style.backgroundColor = "red";
      await timeBetweenCalls(sortingSpeed);

      for (let k = 0; k < chunks.length; k++) {
        if (k != j + 1) {
          chunks[k].style.backgroundColor = "aqua";
        }
      }
      j = j - 1;
    }
    array[j + 1] = key;
    chunks[j + 1].style.height = array[j + 1] * 10 + "px";
    chunks[j + 1].style.backgroundColor = "lightgreen";
    await timeBetweenCalls(sortingSpeed);
  }

  testTimingEnd = performance.now();
  let totalSortTimeSeconds = testTimingEnd - testTimingStart;
  totalSortTimeSeconds = totalSortTimeSeconds / 1000;

  // Storing Timings Locally to Compare to Previous Sorts
  localStorage.setItem("sortTimeInsertion", totalSortTimeSeconds.toFixed(2));

  for (let k = 0; k < chunks.length; k++) {
    chunks[k].style.backgroundColor = "aqua";
  }

  document.getElementById(
    "timer"
  ).innerHTML = `Previous Sort Time: ${localStorage.sortTimeInsertion} Seconds`;
  console.log(
    `Sort Time: ${localStorage.getItem("sortTimeInsertion")} Seconds`
  );
  return array;
}

// Async wait function between function calls. waitTime based on selected sorting speed value
// Lower wait time == faster sorting speed
function timeBetweenCalls(waitTime) {
  return new Promise((resolve) => setTimeout(resolve, waitTime));
}

// Adding Event Listeners

document.addEventListener("DOMContentLoaded", function () {
  generateRandomArray();
  animateArray(unsorted_array);
});

generate_random_array.addEventListener("click", function () {
  generateRandomArray();
  array_chunks.innerHTML = "";
  animateArray(unsorted_array);
});

sort_button.addEventListener("click", function () {
  switch (swtichInputVariable) {
    case "bubble":
      bubbleSortTest(unsorted_array);
      break;

    case "insertion":
      insertionSortAlgorithm(unsorted_array);
      break;
  }
});

// sort_button.addEventListener("click", function () {
//   // bubbleSortTest(unsorted_array);
//   insertionSortAlgorithm(unsorted_array);
// });
